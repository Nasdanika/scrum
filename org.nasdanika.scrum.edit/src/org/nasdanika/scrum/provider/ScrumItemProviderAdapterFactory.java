/**
 */
package org.nasdanika.scrum.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.nasdanika.scrum.util.ScrumAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ScrumItemProviderAdapterFactory extends ScrumAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ScrumItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Note} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoteItemProvider noteItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Note}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoteAdapter() {
		if (noteItemProvider == null) {
			noteItemProvider = new NoteItemProvider(this);
		}

		return noteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.ScrumRealm} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrumRealmItemProvider scrumRealmItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.ScrumRealm}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrumRealmAdapter() {
		if (scrumRealmItemProvider == null) {
			scrumRealmItemProvider = new ScrumRealmItemProvider(this);
		}

		return scrumRealmItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.PartyCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartyCategoryItemProvider partyCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.PartyCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartyCategoryAdapter() {
		if (partyCategoryItemProvider == null) {
			partyCategoryItemProvider = new PartyCategoryItemProvider(this);
		}

		return partyCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Organization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrganizationItemProvider organizationItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Organization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrganizationAdapter() {
		if (organizationItemProvider == null) {
			organizationItemProvider = new OrganizationItemProvider(this);
		}

		return organizationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Project} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProjectItemProvider projectItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Project}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProjectAdapter() {
		if (projectItemProvider == null) {
			projectItemProvider = new ProjectItemProvider(this);
		}

		return projectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Person} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonItemProvider personItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Person}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonAdapter() {
		if (personItemProvider == null) {
			personItemProvider = new PersonItemProvider(this);
		}

		return personItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Member} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MemberItemProvider memberItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Member}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMemberAdapter() {
		if (memberItemProvider == null) {
			memberItemProvider = new MemberItemProvider(this);
		}

		return memberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.PartyReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PartyReferenceItemProvider partyReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.PartyReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPartyReferenceAdapter() {
		if (partyReferenceItemProvider == null) {
			partyReferenceItemProvider = new PartyReferenceItemProvider(this);
		}

		return partyReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Product} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductItemProvider productItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Product}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductAdapter() {
		if (productItemProvider == null) {
			productItemProvider = new ProductItemProvider(this);
		}

		return productItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Customer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CustomerItemProvider customerItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Customer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCustomerAdapter() {
		if (customerItemProvider == null) {
			customerItemProvider = new CustomerItemProvider(this);
		}

		return customerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Request} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequestItemProvider requestItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Request}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequestAdapter() {
		if (requestItemProvider == null) {
			requestItemProvider = new RequestItemProvider(this);
		}

		return requestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Component} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComponentItemProvider componentItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Component}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createComponentAdapter() {
		if (componentItemProvider == null) {
			componentItemProvider = new ComponentItemProvider(this);
		}

		return componentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.TargetGroup} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TargetGroupItemProvider targetGroupItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.TargetGroup}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTargetGroupAdapter() {
		if (targetGroupItemProvider == null) {
			targetGroupItemProvider = new TargetGroupItemProvider(this);
		}

		return targetGroupItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Need} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NeedItemProvider needItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Need}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNeedAdapter() {
		if (needItemProvider == null) {
			needItemProvider = new NeedItemProvider(this);
		}

		return needItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.ProductCategory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductCategoryItemProvider productCategoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.ProductCategory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductCategoryAdapter() {
		if (productCategoryItemProvider == null) {
			productCategoryItemProvider = new ProductCategoryItemProvider(this);
		}

		return productCategoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Epic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EpicItemProvider epicItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Epic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEpicAdapter() {
		if (epicItemProvider == null) {
			epicItemProvider = new EpicItemProvider(this);
		}

		return epicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Feature} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FeatureItemProvider featureItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Feature}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFeatureAdapter() {
		if (featureItemProvider == null) {
			featureItemProvider = new FeatureItemProvider(this);
		}

		return featureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.UserStory} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserStoryItemProvider userStoryItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.UserStory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserStoryAdapter() {
		if (userStoryItemProvider == null) {
			userStoryItemProvider = new UserStoryItemProvider(this);
		}

		return userStoryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Task} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TaskItemProvider taskItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Task}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTaskAdapter() {
		if (taskItemProvider == null) {
			taskItemProvider = new TaskItemProvider(this);
		}

		return taskItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Release} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReleaseItemProvider releaseItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Release}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReleaseAdapter() {
		if (releaseItemProvider == null) {
			releaseItemProvider = new ReleaseItemProvider(this);
		}

		return releaseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Sprint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SprintItemProvider sprintItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Sprint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSprintAdapter() {
		if (sprintItemProvider == null) {
			sprintItemProvider = new SprintItemProvider(this);
		}

		return sprintItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Artifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArtifactItemProvider artifactItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Artifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArtifactAdapter() {
		if (artifactItemProvider == null) {
			artifactItemProvider = new ArtifactItemProvider(this);
		}

		return artifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Theme} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ThemeItemProvider themeItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Theme}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createThemeAdapter() {
		if (themeItemProvider == null) {
			themeItemProvider = new ThemeItemProvider(this);
		}

		return themeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.ProductUser} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ProductUserItemProvider productUserItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.ProductUser}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createProductUserAdapter() {
		if (productUserItemProvider == null) {
			productUserItemProvider = new ProductUserItemProvider(this);
		}

		return productUserItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Interaction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InteractionItemProvider interactionItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Interaction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInteractionAdapter() {
		if (interactionItemProvider == null) {
			interactionItemProvider = new InteractionItemProvider(this);
		}

		return interactionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.ScrumTeam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScrumTeamItemProvider scrumTeamItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.ScrumTeam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScrumTeamAdapter() {
		if (scrumTeamItemProvider == null) {
			scrumTeamItemProvider = new ScrumTeamItemProvider(this);
		}

		return scrumTeamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.DevelopmentTeam} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DevelopmentTeamItemProvider developmentTeamItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.DevelopmentTeam}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDevelopmentTeamAdapter() {
		if (developmentTeamItemProvider == null) {
			developmentTeamItemProvider = new DevelopmentTeamItemProvider(this);
		}

		return developmentTeamItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.nasdanika.scrum.Funding} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FundingItemProvider fundingItemProvider;

	/**
	 * This creates an adapter for a {@link org.nasdanika.scrum.Funding}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFundingAdapter() {
		if (fundingItemProvider == null) {
			fundingItemProvider = new FundingItemProvider(this);
		}

		return fundingItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (noteItemProvider != null) noteItemProvider.dispose();
		if (scrumRealmItemProvider != null) scrumRealmItemProvider.dispose();
		if (partyCategoryItemProvider != null) partyCategoryItemProvider.dispose();
		if (organizationItemProvider != null) organizationItemProvider.dispose();
		if (projectItemProvider != null) projectItemProvider.dispose();
		if (personItemProvider != null) personItemProvider.dispose();
		if (memberItemProvider != null) memberItemProvider.dispose();
		if (partyReferenceItemProvider != null) partyReferenceItemProvider.dispose();
		if (scrumTeamItemProvider != null) scrumTeamItemProvider.dispose();
		if (developmentTeamItemProvider != null) developmentTeamItemProvider.dispose();
		if (productItemProvider != null) productItemProvider.dispose();
		if (customerItemProvider != null) customerItemProvider.dispose();
		if (requestItemProvider != null) requestItemProvider.dispose();
		if (componentItemProvider != null) componentItemProvider.dispose();
		if (targetGroupItemProvider != null) targetGroupItemProvider.dispose();
		if (needItemProvider != null) needItemProvider.dispose();
		if (productCategoryItemProvider != null) productCategoryItemProvider.dispose();
		if (themeItemProvider != null) themeItemProvider.dispose();
		if (productUserItemProvider != null) productUserItemProvider.dispose();
		if (epicItemProvider != null) epicItemProvider.dispose();
		if (featureItemProvider != null) featureItemProvider.dispose();
		if (userStoryItemProvider != null) userStoryItemProvider.dispose();
		if (taskItemProvider != null) taskItemProvider.dispose();
		if (releaseItemProvider != null) releaseItemProvider.dispose();
		if (sprintItemProvider != null) sprintItemProvider.dispose();
		if (artifactItemProvider != null) artifactItemProvider.dispose();
		if (interactionItemProvider != null) interactionItemProvider.dispose();
		if (fundingItemProvider != null) fundingItemProvider.dispose();
	}

}
